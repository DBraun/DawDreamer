name: Compile, Test, and Deploy
on:
  pull_request: {}
  push:
    branches:
      - main
  release:
    types: [published]
jobs:

  build-ubuntu:
    runs-on: ubuntu-latest
    # container: quay.io/pypa/manylinux2014_x86_64
    strategy:
      matrix:
        include:
        - { python-version: "3.9", python-major: "39"}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    # - name: Install Ubuntu dependencies
    #   # yum install gcc gcc-c++ make
    #   run: |
    #     yum -y update && \
    #     yum install -y \
    #     tar \
    #     autoconf \
    #     automake \
    #     libtool \
    #     ca-certificates \
    #     boost-devel \
    #     boost-python \
    #     libX11-devel \
    #     libXext-devel \
    #     libXinerama \
    #     libXinerama-devel \
    #     libXrandr \
    #     libXrandr-devel \
    #     libXcursor \
    #     libXcursor-devel \
    #     freeglut \
    #     freeglut-devel \
    #     libXcomposite \
    #     libXcomposite-devel \
    #     cmake \
    #     libsndfile \
    #     libsndfile-devel \
    #     libvorbis-devel \
    #     opus-devel \
    #     flac-devel \
    #     flac-libs \
    #     alsa-lib-devel \
    #     alsa-utils

    # - name: Checkout alsa-lib
    #   uses: actions/checkout@v2
    #   with:
    #     repository: alsa-project/alsa-lib
    #     path: alsa-lib

    # - name: Build ALSA-lib
    #   run: |
    #     cd alsa-lib
    #     autoupdate
    #     ./gitcompile

    # - name: Checkout openssl
    #   uses: actions/checkout@v2
    #   with:
    #     repository: openssl/openssl
    #     path: openssl

    # - name: Build openssl
    #   run: |
    #     yum install -y make gcc perl-core pcre-devel wget zlib-devel
    #     cd openssl
    #     ./Configure --prefix=/usr --openssldir=/etc/ssl --libdir=lib no-shared zlib-dynamic
    #     make
    #     make test
    #     make install

    # - name: Checkout Freetype
    #   uses: actions/checkout@v2
    #   with:
    #     repository: freetype/freetype
    #     path: freetype

    # - name: Build Freetype
    #   run: |
    #     cd freetype
    #     sh autogen.sh
    #     ./configure
    #     make
    #     make install

    # - name: Checkout curl
    #   uses: actions/checkout@v2
    #   with:
    #     repository: curl/curl
    #     path: curl

    # - name: Build curl
    #   run: |
    #     cd curl
    #     autoreconf -fi
    #     ./configure --with-openssl
    #     make

    # - name: Build libsamplerate
    #   run: |
    #     cd thirdparty/libsamplerate
    #     mkdir build_release
    #     cmake -DCMAKE_BUILD_TYPE=Release -Bbuild_release -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    #     cd build_release
    #     TARGET_ARCH=x86_64 make CONFIG=Release VERBOSE=1


  #   - name: Upload artifact
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: dawdreamer-ubuntu-python-${{matrix.python-major}}
  #       path: dawdreamer/

  # build-ubuntu-2:
  #   runs-on: ubuntu-latest
  #   needs: [build-ubuntu]
  #   strategy:
  #     matrix:
  #       include:
  #       - { python-version: "3.9", python-major: "39"}

    # steps:
    # - uses: actions/checkout@v2
    #   with:
    #     submodules: true

    # - uses: actions/download-artifact@v3
    #   with:
    #     name: dawdreamer-ubuntu-python-${{matrix.python-major}}
    #     path: dawdreamer

    - name: Checkout faustlibraries
      uses: actions/checkout@v2
      with:
        repository: grame-cncm/faustlibraries
        path: faustlibraries

    - name: copy faust libraries
      # necessary for setup.py to work.
      run: |
        cp -v -r faustlibraries dawdreamer
        rm -rf dawdreamer/faustlibraries/.git

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.4.0
      env:
        CIBW_PLATFORM: linux
        CIBW_BUILD: cp39-manylinux_x86_64
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        CIBW_BUILD_VERBOSITY: 3
        CIBW_BEFORE_BUILD_LINUX: sh -v before_linux_build.sh ${{ matrix.python-major }} ${{ matrix.python-version }}
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
          rm -f dawdreamer/libfaust.so.2 &&
          rm -f dawdreamer/dawdreamer.so &&
          pip install auditwheel-symbols && (auditwheel repair -w {dest_dir} {wheel} || auditwheel-symbols --manylinux 2014 {wheel})
        CIBW_TEST_REQUIRES: -r test-requirements.txt soundfile
        CIBW_TEST_COMMAND: "yum install -y libsndfile libsndfile-devel && cd {project}/tests && python -m pytest -v ."
        CIBW_ARCHS: auto64
        CIBW_SKIP: "*pp* *p36-* *p37-* *p38-* *p310-*"

    - uses: actions/upload-artifact@v2
      with:
        name: my-wheel-artifact
        path: ./wheelhouse/*.whl

  # build-ubuntu-docker:
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       include:
  #       - { python-version: "3.9"}

  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: true

  #   - name: Setup Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Install Python dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install setuptools wheel pytest numpy librosa scipy

  #   - name: Build Docker image
  #     run: docker build -t dawdreamer .

    # todo: enable this
    # note that the Dockerfile pulls the main branch!
    # - uses: addnab/docker-run-action@v3
    #   with:
    #     image: dawdreamer
    #     run: |
    #       echo "Running tests"
    #       cd /DawDreamer/tests
    #       python -m pytest -s .

  # build-windows:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       include:
  #       - { os: windows-latest, python-version: "3.7", CIBW-BUILD: "cp37*"}
  #       - { os: windows-latest, python-version: "3.8", CIBW-BUILD: "cp38*"}
  #       - { os: windows-latest, python-version: "3.9", CIBW-BUILD: "cp39*"}

  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: true

  #   - name: Setup Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Install Python dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install setuptools wheel numpy librosa scipy

  #   - name: Add msbuild to PATH
  #     uses: microsoft/setup-msbuild@v1.0.3

  #   - name: Get CMake
  #     uses: lukka/get-cmake@latest

  #   - name: Checkout faustlibraries
  #     uses: actions/checkout@v2
  #     with:
  #       repository: grame-cncm/faustlibraries
  #       path: faustlibraries

  #   - name: copy faust libraries
  #     # necessary for setup.py to work.
  #     run: |
  #       Remove-Item -Recurse -Force "faustlibraries/.git"
  #       cp -v -r faustlibraries dawdreamer

  #   - name: Build libsamplerate
  #     run: |
  #       cd thirdparty/libsamplerate
  #       mkdir build_release
  #       cmake -DCMAKE_BUILD_TYPE=Release -Bbuild_release
  #       cd build_release
  #       msbuild libsamplerate.sln /property:Configuration=Release

  #   - name: Build Windows (Release)
  #     run: |
  #       msbuild Builds/VisualStudio2019/DawDreamer.sln /property:Configuration=Release

  #   - name: Install cibuildwheel
  #     run: python -m pip install cibuildwheel>=2.3.1

  #   - name: Build Wheels
  #     run: |
  #       python -m cibuildwheel --output-dir wheelhouse
  #     env:
  #       PYTHONMAJOR: ${{ matrix.python-version }}
  #       CIBW_BUILD_VERBOSITY: 1
  #       CIBW_TEST_REQUIRES: -r test-requirements.txt
  #       CIBW_TEST_COMMAND: "cd /D {project}\\tests && python -m pytest ."
  #       CIBW_ARCHS: auto64
  #       CIBW_BUILD: ${{matrix.CIBW-BUILD}}

  #   - uses: actions/upload-artifact@v2
  #     with:
  #       name: my-wheel-artifact
  #       path: ./wheelhouse/*.whl

  #   - name: "Build docs for GitHub pages"
  #     if: ${{ matrix.python-version == '3.8' && github.event_name == 'release' && github.event.action == 'published' }}
  #     shell: cmd
  #     run: |
  #       pip install -U sphinx
  #       cd docs && make.bat html
  #   - name: Deploy docs
  #     uses: peaceiris/actions-gh-pages@v3
  #     # todo: make condition for being on main branch
  #     if: ${{ matrix.python-version == '3.8' && github.event_name == 'release' && github.event.action == 'published' }}
  #     with:
  #       github_token: ${{ secrets.GITHUB_TOKEN }}
  #       publish_dir: ./docs/_build/html

  # build-macos:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       include:
  #       - { os: macos-latest, build: cp37-macosx_x86_64, archs-macos: "x86_64", python-version: "3.7", osx-archs: "x86_64", ARCHS: "x86_64", python-major: "3.7m" }
  #       - { os: macos-latest, build: cp38-macosx_universal2, archs-macos: "universal2", python-version: "3.8", osx-archs: "x86_64;arm64", ARCHS: "x86_64 arm64", python-major: "3.8" }
  #       - { os: macos-latest, build: cp39-macosx_universal2, archs-macos: "universal2", python-version: "3.9", osx-archs: "x86_64;arm64", ARCHS: "x86_64 arm64", python-major: "3.9" }
  #       - { os: macos-latest, build: cp310-macosx_universal2, archs-macos: "universal2", python-version: "3.10", osx-archs: "x86_64;arm64", ARCHS: "x86_64 arm64", python-major: "3.10" }

  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: true

  #   - name: Get CMake
  #     uses: lukka/get-cmake@latest

  #   - name: Build libsamplerate
  #     run: |
  #       cd thirdparty/libsamplerate
  #       mkdir build_release
  #       cmake -DCMAKE_BUILD_TYPE=Release -Bbuild_release -DCMAKE_OSX_ARCHITECTURES="${{matrix.osx-archs}}" -DLIBSAMPLERATE_EXAMPLES=off -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15
  #       make --directory=build_release
  #       cd ../..

  #   - name: Checkout faustlibraries
  #     uses: actions/checkout@v2
  #     with:
  #       repository: grame-cncm/faustlibraries
  #       path: faustlibraries

  #   - name: copy faust libraries
  #     # necessary for setup.py to work.
  #     run: |
  #       cp -v -r faustlibraries dawdreamer
  #       rm -rf dawdreamer/faustlibraries/.git

  #   - name: Build wheels ${{ matrix.python-version }}
  #     uses: pypa/cibuildwheel@v2.3.1
  #     env:
  #       # note that the Projucer project refers to PYTHONMAJOR and pythonLocation, so they must be set here
  #       PYTHONMAJOR: ${{ matrix.python-major }}
  #       MACOSX_DEPLOYMENT_TARGET: 10.15
  #       CIBW_BUILD_VERBOSITY: 1
  #       CIBW_BEFORE_BUILD: |
  #         export pythonLocation=$(python3-config --prefix)
  #         otool -L $pythonLocation/bin/python3
  #         xcodebuild ARCHS="${{matrix.ARCHS}}" ONLY_ACTIVE_ARCH=NO -configuration Release -project Builds/MacOSX/DawDreamer.xcodeproj/
  #         mv Builds/MacOSX/build/Release/dawdreamer.so.dylib Builds/MacOSX/build/Release/dawdreamer.so
  #         otool -L Builds/MacOSX/build/Release/dawdreamer.so
  #         install_name_tool -change @rpath/libfaust.2.dylib @loader_path/libfaust.2.dylib Builds/MacOSX/build/Release/dawdreamer.so
  #         otool -L Builds/MacOSX/build/Release/dawdreamer.so
  #       CIBW_TEST_REQUIRES: -r test-requirements.txt
  #       CIBW_TEST_COMMAND: "cd {project}/tests; python -m pytest -s ."
  #       CIBW_BUILD: ${{matrix.build}}
  #       CIBW_ARCHS: auto64
  #       CIBW_ARCHS_MACOS: ${{matrix.archs-macos}}
  #       # todo: want to test Python 3.10
  #       CIBW_TEST_SKIP: "*310*"

  #   - uses: actions/upload-artifact@v2
  #     with:
  #       name: my-wheel-artifact
  #       path: ./wheelhouse/*.whl

  # upload-pypi:
  #   needs: [build-windows, build-ubuntu-2, build-macos]
  #   runs-on: ubuntu-latest
  #   name: "Upload wheels to PyPI"
  #   if: github.event_name == 'release' && github.event.action == 'published'
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: my-wheel-artifact
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         user: __token__
  #         password: ${{ secrets.PYPI_API_TOKEN }}
